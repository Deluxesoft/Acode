name: Build Android Apk

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  spell-check:
    timeout-minutes: 5
    name: Check spelling
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4

      - name: Check spelling
        uses: crate-ci/typos@master
        with:
          config: ./_typos.toml

  quality:
    timeout-minutes: 5
    name: Linting and formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Biome
        uses: biomejs/setup-biome@v2

      - name: Run Biome
        run: biome ci .

  build-android-apk:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Apache Cordova CLI
        run: npm install -g cordova

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          # This is required because the Android SDK's sdkmanager tool
          # is compiled with Java 17 (class file version 61.0).

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: '33'
          build-tools: '33.0.0'

      - name: Initial setup (yarn setup)
        run: yarn setup

      - name: Build Android Release AAB
        run: yarn build android free prod

      - name: Locate AAB artifact
        id: locate_aab
        run: |
          AAB_PATH=$(find . -name "app-release.aab" | head -n 1)
          if [ -z "$AAB_PATH" ]; then
            echo "Error: No release AAB found after build! Check previous steps' logs for build failures."
            ls -R .
            exit 1
          fi
          echo "Found AAB at: $AAB_PATH"
          echo "AAB_PATH=$AAB_PATH" >> "$GITHUB_OUTPUT"

      - name: Install Bundletool
        run: |
          # Use a specific version for reliability. Check https://github.com/google/bundletool/releases/download/1.16.0/bundletool-all-1.16.0.jar -O bundletool.jar
          wget https://github.com/google/bundletool/releases/download/1.16.0/bundletool-all-1.16.0.jar -O bundletool.jar
          echo "BUNDLETOOL_JAR=$GITHUB_WORKSPACE/bundletool.jar" >> "$GITHUB_ENV"

      - name: Generate APK from AAB
        id: generate_apk_from_aab # This ID is necessary for outputting the path
        run: |
          AAB_PATH="${{ steps.locate_aab.outputs.AAB_PATH }}"
          OUTPUT_APKS_PATH="app-release.apks"

          java -jar "${{ env.BUNDLETOOL_JAR }}" build-apks \
            --bundle="$AAB_PATH" \
            --output="$OUTPUT_APKS_PATH" \
            --mode=universal

          unzip "$OUTPUT_APKS_PATH" -d apks_output

          UNIVERSAL_APK_PATH=$(find apks_output -name "universal.apk" | head -n 1)

          if [ -z "$UNIVERSAL_APK_PATH" ]; then
            echo "Error: Universal APK not found after bundletool conversion!"
            ls -R apks_output
            exit 1
          fi
          echo "Found universal APK at: $UNIVERSAL_APK_PATH"
          echo "APK_GENERATED_PATH=$UNIVERSAL_APK_PATH" >> "$GITHUB_OUTPUT"

      # --- NEW STEP: Sign the Universal APK with Debug Key ---
      - name: Sign Universal APK with Debug Key
        run: |
          APK_TO_SIGN="${{ steps.generate_apk_from_aab.outputs.APK_GENERATED_PATH }}"
          
          # Find the latest Android build-tools version available on the runner
          BUILD_TOOLS_VERSION=$(find "$ANDROID_HOME/build-tools" -maxdepth 1 -type d -printf '%f\n' | sort -rV | head -n 1)
          APKSIGNER="$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/apksigner"

          if [ ! -f "$APKSIGNER" ]; then
            echo "Error: apksigner not found at $APKSIGNER. Please check Android SDK setup."
            exit 1
          fi

          echo "Signing $APK_TO_SIGN using debug key..."
          "$APKSIGNER" sign \
            --ks ~/.android/debug.keystore \
            --ks-key-alias androiddebugkey \
            --ks-pass pass:android \
            "$APK_TO_SIGN"

          # Optional: Verify the APK signature for debugging purposes
          echo "Verifying APK signature..."
          "$APKSIGNER" verify "$APK_TO_SIGN"
          echo "APK signing complete."

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: ${{ steps.generate_apk_from_aab.outputs.APK_GENERATED_PATH }} # This path now points to the signed APK
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build-android-apk
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js for release job
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get project name and version
        id: project_info
        run: |
          PROJECT_NAME=$(basename "${{ github.repository }}")
          VERSION=$(node -p "require('./package.json').version")

          echo "PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_OUTPUT"
          echo "APP_VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-release-apk
          path: ./release_artifacts

      - name: Rename APK and prepare for upload
        id: prepare_apk
        run: |
          PROJECT_NAME="${{ steps.project_info.outputs.PROJECT_NAME }}"
          APP_VERSION="${{ steps.project_info.outputs.APP_VERSION }}"
          OLD_APK_PATH="./release_artifacts/universal.apk"
          NEW_APK_NAME="${PROJECT_NAME}-v${APP_VERSION}.apk"
          NEW_APK_PATH="./release_artifacts/${NEW_APK_NAME}"

          mv "$OLD_APK_PATH" "$NEW_APK_PATH"
          echo "New APK path: $NEW_APK_PATH"
          echo "RELEASE_APK_PATH=$NEW_APK_PATH" >> "$GITHUB_OUTPUT"
          echo "RELEASE_APK_NAME=$NEW_APK_NAME" >> "$GITHUB_OUTPUT"

      - name: Create Release and Upload APK
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.project_info.outputs.APP_VERSION }}"
          name: "${{ steps.project_info.outputs.PROJECT_NAME }} Release v${{ steps.project_info.outputs.APP_VERSION }}"
          body: |
            New Android APK for version ${{ steps.project_info.outputs.APP_VERSION }}.
            Automatic release from GitHub Actions.
          draft: false
          prerelease: false
          files: ${{ steps.prepare_apk.outputs.RELEASE_APK_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
