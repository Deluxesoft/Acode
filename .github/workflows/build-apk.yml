name: Build Android Apk

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  spell-check:
    timeout-minutes: 5
    name: Check spelling
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4

      - name: Check spelling
        uses: crate-ci/typos@master
        with:
          config: ./_typos.toml

  quality:
    timeout-minutes: 5
    name: Linting and formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Biome
        uses: biomejs/setup-biome@v2

      - name: Run Biome
        run: biome ci .

  build-android-apk:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Apache Cordova CLI
        run: npm install -g cordova

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17' # Ensuring this is set to 17

      - name: Install Android SDK Build Tools and Platforms
        run: |
          # Define Android SDK Root - this is where all SDK components will be installed
          ANDROID_SDK_ROOT="${{ runner.temp }}/android-sdk"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV # Make this available for subsequent steps

          mkdir -p "$ANDROID_SDK_ROOT"

          # Download and unzip the Android command-line tools
          # The zip usually contains a 'cmdline-tools' directory.
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-8583971_latest.zip -O cmdline-tools.zip
          unzip -q cmdline-tools.zip

          # Move the extracted 'cmdline-tools' contents into the desired 'latest' directory
          # This ensures sdkmanager is at $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv cmdline-tools/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"

          # Add the 'bin' directory of the command-line tools to the system's PATH
          # This is crucial so that 'sdkmanager' can be found and executed
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          
          # Accept Android SDK licenses (essential for sdkmanager to function)
          yes | sdkmanager --licenses > /dev/null

          # Install specific Android SDK components needed for the build
          # Based on your previous setup (API level 33, build tools 33.0.0)
          sdkmanager "platform-tools" "build-tools;33.0.0" "platforms;android-33"

      - name: Initial setup (yarn setup)
        run: yarn setup

      - name: Build Android Release AAB
        run: yarn build android free prod

      - name: Locate AAB artifact
        id: locate_aab
        run: |
          AAB_PATH=$(find . -name "app-release.aab" | head -n 1)
          if [ -z "$AAB_PATH" ]; then
            echo "Error: No release AAB found after build! Check previous steps' logs for build failures."
            ls -R .
            exit 1
          fi
          echo "Found AAB at: $AAB_PATH"
          echo "AAB_PATH=$AAB_PATH" >> "$GITHUB_OUTPUT"

      - name: Install Bundletool
        run: |
          # Use a specific version for reliability. Check https://github.com/google/bundletool/releases for the latest stable.
          wget https://github.com/google/bundletool/releases/download/1.16.0/bundletool-all-1.16.0.jar -O bundletool.jar
          echo "BUNDLETOOL_JAR=$GITHUB_WORKSPACE/bundletool.jar" >> $GITHUB_ENV

      - name: Generate APK from AAB
        run: |
          AAB_PATH="${{ steps.locate_aab.outputs.AAB_PATH }}"
          OUTPUT_APKS_PATH="app-release.apks"

          java -jar "${{ env.BUNDLETOOL_JAR }}" build-apks \
            --bundle="$AAB_PATH" \
            --output="$OUTPUT_APKS_PATH" \
            --mode=universal

          unzip "$OUTPUT_APKS_PATH" -d apks_output

          UNIVERSAL_APK_PATH=$(find apks_output -name "universal.apk" | head -n 1)

          if [ -z "$UNIVERSAL_APK_PATH" ]; then
            echo "Error: Universal APK not found after bundletool conversion!"
            ls -R apks_output
            exit 1
          fi
          echo "Found universal APK at: $UNIVERSAL_APK_PATH"
          echo "APK_PATH=$UNIVERSAL_APK_PATH" >> $GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: ${{ env.APK_PATH }}
          retention-days: 7
