# Generate signed apk renaming it to the App name and version based on git tags. also there is a step to check if the generated apk has the debuggable flag on or off

name: Build Android Unsigned APK for Inspection/Specific Use

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specify a Git tag for the APK version (e.g., v1.0.0, 1.2.3). If empty, uses the latest tag.'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-android-apk:
    name: Build Android APK (Unsigned)
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '18'
      JAVA_VERSION: '17'
      ANDROID_API_LEVEL: '33'
      ANDROID_BUILD_TOOLS: '33.0.0'
      ANDROID_SDK_ROOT: '/usr/local/lib/android/sdk'
    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set version in config.xml, package.json, and Gradle from tag or input
        id: set_version
        run: |
          set -e
          VERSION="${{ github.event.inputs.tag }}"
          if [ -z "$VERSION" ]; then
            VERSION=$(git describe --tags --abbrev=0 --match "v[0-9]*" 2>/dev/null | sed 's/^v//' || \
                      git describe --tags --abbrev=0 --match "[0-9]*" 2>/dev/null | sed 's/^v//')
            [ -z "$VERSION" ] && VERSION="0.0.1"
          else
            VERSION=$(echo "$VERSION" | sed 's/^v//')
          fi
          echo "Determined version: $VERSION"
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

          # Set config.xml version (Cordova main source of truth)
          if [ -f config.xml ]; then
            sed -i "s/version=\"[^\"]*\"/version=\"$VERSION\"/" config.xml
            echo "Set config.xml version to $VERSION"
          fi

          # Set package.json version (if present)
          if [ -f package.json ]; then
            jq ".version = \"$VERSION\"" package.json > package.tmp.json && mv package.tmp.json package.json
            echo "Set package.json version to $VERSION"
          fi

          # Set Gradle versionName and increment versionCode (if present)
          if [ -f android/app/build.gradle ]; then
            sed -i "s/versionName \".*\"/versionName \"$VERSION\"/" android/app/build.gradle
            CUR_CODE=$(grep versionCode android/app/build.gradle | head -n1 | awk '{print $2}')
            if [[ "$CUR_CODE" =~ ^[0-9]+$ ]]; then
              NEW_CODE=$((CUR_CODE + 1))
              sed -i "s/versionCode [0-9]\+/versionCode $NEW_CODE/" android/app/build.gradle
              echo "Set Gradle versionCode to $NEW_CODE"
            fi
            echo "Set versionName in Gradle to $VERSION"
          fi

      - name: Delete platforms directory if exists
        run: rm -rf platforms

      - name: Install Apache Cordova CLI
        run: npm install -g cordova

      - name: Remove Android platform (if exists)
        run: cordova platform rm android || true

      - name: Add Android platform
        run: cordova platform add android

      - name: Print versions before build
        run: |
          echo "config.xml:"; grep version= config.xml || cat config.xml
          echo "package.json:"; grep version package.json || cat package.json
          echo "Gradle:"; grep versionName android/app/build.gradle || echo "No versionName"; grep versionCode android/app/build.gradle || echo "No versionCode"

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java Development Kit (JDK) ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK (API Level ${{ env.ANDROID_API_LEVEL }}, Build Tools ${{ env.ANDROID_BUILD_TOOLS }})
        uses: android-actions/setup-android@v2
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}

      - name: Initial project setup (yarn setup)
        run: yarn setup

      - name: Build Android Release AAB
        run: yarn build android free prod

      - name: Locate AAB artifact
        id: locate_aab
        run: |
          AAB_PATH=$(find . -name "app-release.aab" | head -n 1)
          if [ -z "$AAB_PATH" ]; then
            echo "Error: No release AAB found after build! Check previous steps' logs for build failures."
            ls -R .
            exit 1
          fi
          echo "Found AAB at: $AAB_PATH"
          echo "AAB_PATH=$AAB_PATH" >> "$GITHUB_OUTPUT"

      - name: Install Google Bundletool
        run: |
          wget https://github.com/google/bundletool/releases/download/1.16.0/bundletool-all-1.16.0.jar -O bundletool.jar
          echo "BUNDLETOOL_JAR=$GITHUB_WORKSPACE/bundletool.jar" >> "$GITHUB_ENV"

      - name: Generate APK from AAB (Unsigned)
        id: generate_apk_from_aab
        run: |
          AAB_PATH="${{ steps.locate_aab.outputs.AAB_PATH }}"
          OUTPUT_APKS_PATH="app-unsigned.apks"
          java -jar "${{ env.BUNDLETOOL_JAR }}" build-apks \
            --bundle="$AAB_PATH" \
            --output="$OUTPUT_APKS_PATH" \
            --mode=universal
          unzip "$OUTPUT_APKS_PATH" -d apks_output
          UNIVERSAL_APK_PATH=$(find apks_output -name "universal.apk" | head -n 1)
          if [ -z "$UNIVERSAL_APK_PATH" ]; then
            echo "Error: Universal APK not found after bundletool conversion!"
            ls -R apks_output
            exit 1
          fi
          echo "Found universal APK at: $UNIVERSAL_APK_PATH"
          echo "APK_GENERATED_PATH=$UNIVERSAL_APK_PATH" >> "$GITHUB_OUTPUT"

      - name: Parse version from config.xml for APK name
        id: parse_version
        run: |
          VERSION=$(grep -oP 'version="\K[^"]+' config.xml | head -n1)
          echo "config_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename APK and Prepare for Upload
        id: prepare_apk
        run: |
          PROJECT_NAME="Acode"
          APP_VERSION="${{ steps.parse_version.outputs.config_version }}"
          OLD_APK_PATH="${{ steps.generate_apk_from_aab.outputs.APK_GENERATED_PATH }}"
          NEW_APK_NAME="${PROJECT_NAME}-v${APP_VERSION}-unsigned.apk"
          NEW_APK_PATH="./release_artifacts/${NEW_APK_NAME}"
          mkdir -p ./release_artifacts
          cp "$OLD_APK_PATH" "$NEW_APK_PATH"
          echo "Renamed APK to: $NEW_APK_PATH"
          echo "RELEASE_APK_PATH=$NEW_APK_PATH" >> "$GITHUB_OUTPUT"
          echo "RELEASE_APK_NAME=$NEW_APK_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-unsigned-apk
          path: ${{ steps.prepare_apk.outputs.RELEASE_APK_PATH }}
          retention-days: 7